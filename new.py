import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import random
import warnings
import ollama  # Added import for local LLM chat
warnings.filterwarnings('ignore')

# Suppress Streamlit warnings
import logging
logging.getLogger('streamlit').setLevel(logging.ERROR)

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="AI Supply Chain Dashboard - ABC Company",
    page_icon="üöõ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f2937;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 0.5rem;
        color: white;
        margin: 0.5rem 0;
    }
    .alert-box {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        border-left: 4px solid #f59e0b;
        background-color: #fef3c7;
        color: black;
    }
    .success-box {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        border-left: 4px solid #10b981;
        background-color: #d1fae5;
        color: black;
    }
    .danger-box {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        border-left: 4px solid #ef4444;
        background-color: #fee2e2;
        color: black;
    }
    .notification-box {
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        border-left: 4px solid #3b82f6;
        background-color: #dbeafe;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        color: black;
    }
    .solution-card {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border: 2px solid #e5e7eb;
        background-color: #f9fafb;
        transition: all 0.3s ease;
        color: black;
    }
    .solution-card:hover {
        border-color: #3b82f6;
        background-color: #eff6ff;
    }
    .solution-card.best {
        border-color: #10b981;
        background-color: #ecfdf5;
    }
    .solution-card.medium {
        border-color: #f59e0b;
        background-color: #fffbeb;
    }
    .solution-card.urgent {
        border-color: #ef4444;
        background-color: #fef2f2;
    }
    .timer-box {
        padding: 0.5rem;
        border-radius: 0.25rem;
        background-color: #fef3c7;
        border: 1px solid #f59e0b;
        text-align: center;
        font-weight: bold;
        color: black;
    }
</style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'simulation_running' not in st.session_state:
    st.session_state.simulation_running = False
if 'simulation_step' not in st.session_state:
    st.session_state.simulation_step = 0
if 'inventory_data' not in st.session_state:
    st.session_state.inventory_data = {
        'Pin lithium': {'current': 2500, 'required': 3500, 'trend': -50},
        'Motor ƒëi·ªán': {'current': 1800, 'required': 2200, 'trend': -30},
        'Khung xe': {'current': 3200, 'required': 2800, 'trend': -40},
        'B√°nh xe': {'current': 4500, 'required': 4200, 'trend': -60},
        'Phanh ƒëƒ©a': {'current': 2100, 'required': 2800, 'trend': -35}
    }
if 'route_data' not in st.session_state:
    st.session_state.route_data = {
        'Tuy·∫øn A (Trung Qu·ªëc)': {'risk': 85, 'delay': '7-10 ng√†y', 'position': 0, 'speed': 2},
        'Tuy·∫øn B (ƒê√†i Loan)': {'risk': 25, 'delay': '0-2 ng√†y', 'position': 0, 'speed': 3},
        'Tuy·∫øn C (Nh·∫≠t B·∫£n)': {'risk': 45, 'delay': '3-5 ng√†y', 'position': 0, 'speed': 2.5}
    }
if 'orders_processed' not in st.session_state:
    st.session_state.orders_processed = 0
if 'ai_decisions' not in st.session_state:
    st.session_state.ai_decisions = []
if 'active_notifications' not in st.session_state:
    st.session_state.active_notifications = []
if 'notification_history' not in st.session_state:
    st.session_state.notification_history = []
if 'notification_chats' not in st.session_state:
    st.session_state.notification_chats = {}

# L·ªõp AI Decision Engine v·ªõi Notification System
class AIDecisionEngine:
    def __init__(self):
        self.risk_threshold = 70
        self.inventory_threshold = 0.8
        self.decision_history = []
        self.notification_id_counter = 0
    
    def generate_notification_id(self):
        """T·∫°o ID duy nh·∫•t cho notification"""
        self.notification_id_counter += 1
        return f"NOTIF_{self.notification_id_counter}_{int(time.time())}"
    
    def analyze_inventory_risk(self, inventory_data):
        """Ph√¢n t√≠ch r·ªßi ro t·ªìn kho"""
        risk_items = []
        try:
            for item, data in inventory_data.items():
                # Fix division by zero error
                if data['required'] <= 0:
                    continue
                ratio = data['current'] / data['required']
                if ratio < self.inventory_threshold:
                    risk_level = 'HIGH' if ratio < 0.7 else 'MEDIUM'
                    risk_items.append({
                        'item': item,
                        'ratio': ratio,
                        'risk': risk_level,
                        'shortage': max(0, data['required'] - data['current'])
                    })
        except Exception as e:
            st.error(f"L·ªói ph√¢n t√≠ch t·ªìn kho: {str(e)}")
        return risk_items
    
    def analyze_route_risk(self, route_data):
        """Ph√¢n t√≠ch r·ªßi ro tuy·∫øn v·∫≠n chuy·ªÉn"""
        high_risk_routes = []
        try:
            for route, data in route_data.items():
                if data['risk'] >= self.risk_threshold:
                    high_risk_routes.append({
                        'route': route,
                        'risk': data['risk'],
                        'delay': data['delay']
                    })
        except Exception as e:
            st.error(f"L·ªói ph√¢n t√≠ch tuy·∫øn v·∫≠n chuy·ªÉn: {str(e)}")
        return high_risk_routes
    
    def predict_demand(self, current_orders, trend_factor=1.4):
        """D·ª± b√°o nhu c·∫ßu s·ª≠ d·ª•ng ML"""
        try:
            # Fix division by zero and negative values
            if current_orders <= 0:
                current_orders = 1  # Set minimum value to avoid issues
            
            # M√¥ ph·ªèng ML model ƒë∆°n gi·∫£n
            base_demand = current_orders * trend_factor
            seasonal_factor = 1 + 0.2 * np.sin(datetime.now().month * np.pi / 6)
            predicted_demand = base_demand * seasonal_factor
            return max(1, int(predicted_demand))  # Ensure positive value
        except Exception as e:
            st.error(f"L·ªói d·ª± b√°o nhu c·∫ßu: {str(e)}")
            return max(1, current_orders)  # Fallback value
    
    def generate_solutions(self, problem_type, problem_data):
        """T·∫°o danh s√°ch gi·∫£i ph√°p cho v·∫•n ƒë·ªÅ"""
        solutions = []
        
        if problem_type == 'INVENTORY_SHORTAGE':
            item = problem_data['item']
            shortage = problem_data['shortage']
            
            solutions = [
                {
                    'id': 'sol_1',
                    'title': f'Nh·∫≠p kh·∫©u kh·∫©n c·∫•p {item}',
                    'description': f'Nh·∫≠p ngay {int(shortage * 1.5)} {item} t·ª´ nh√† cung c·∫•p ch√≠nh',
                    'benefit_score': 95,
                    'cost': 'Cao',
                    'time': '2-3 ng√†y',
                    'risk': 'Th·∫•p',
                    'priority': 'best'
                },
                {
                    'id': 'sol_2',
                    'title': f'T√¨m nh√† cung c·∫•p thay th·∫ø',
                    'description': f'T√¨m nh√† cung c·∫•p m·ªõi cho {item} v·ªõi gi√° t·ªët h∆°n',
                    'benefit_score': 85,
                    'cost': 'Trung b√¨nh',
                    'time': '5-7 ng√†y',
                    'risk': 'Trung b√¨nh',
                    'priority': 'medium'
                },
                {
                    'id': 'sol_3',
                    'title': 'T·ªëi ∆∞u h√≥a s·∫£n xu·∫•t',
                    'description': f'Gi·∫£m s·∫£n xu·∫•t t·∫°m th·ªùi ƒë·ªÉ ti·∫øt ki·ªám {item}',
                    'benefit_score': 70,
                    'cost': 'Th·∫•p',
                    'time': '1-2 ng√†y',
                    'risk': 'Cao',
                    'priority': 'urgent'
                },
                {
                    'id': 'sol_4',
                    'title': 'S·ª≠ d·ª•ng h√†ng t·ªìn kho d·ª± ph√≤ng',
                    'description': f'K√≠ch ho·∫°t kho d·ª± ph√≤ng cho {item}',
                    'benefit_score': 80,
                    'cost': 'Trung b√¨nh',
                    'time': '1 ng√†y',
                    'risk': 'Th·∫•p',
                    'priority': 'medium'
                }
            ]
        
        elif problem_type == 'ROUTE_RISK':
            route = problem_data['route']
            risk = problem_data['risk']
            
            solutions = [
                {
                    'id': 'sol_1',
                    'title': f'Chuy·ªÉn sang tuy·∫øn thay th·∫ø',
                    'description': f'Chuy·ªÉn t·ª´ {route} sang tuy·∫øn an to√†n h∆°n',
                    'benefit_score': 90,
                    'cost': 'Trung b√¨nh',
                    'time': '1-2 ng√†y',
                    'risk': 'Th·∫•p',
                    'priority': 'best'
                },
                {
                    'id': 'sol_2',
                    'title': 'TƒÉng c∆∞·ªùng b·∫£o hi·ªÉm v·∫≠n chuy·ªÉn',
                    'description': f'Mua b·∫£o hi·ªÉm b·ªï sung cho {route}',
                    'benefit_score': 75,
                    'cost': 'Cao',
                    'time': '3-5 ng√†y',
                    'risk': 'Th·∫•p',
                    'priority': 'medium'
                },
                {
                    'id': 'sol_3',
                    'title': 'ƒê√†m ph√°n v·ªõi ƒë·ªëi t√°c v·∫≠n chuy·ªÉn',
                    'description': f'Y√™u c·∫ßu c·∫£i thi·ªán d·ªãch v·ª• cho {route}',
                    'benefit_score': 65,
                    'cost': 'Th·∫•p',
                    'time': '7-10 ng√†y',
                    'risk': 'Cao',
                    'priority': 'urgent'
                },
                {
                    'id': 'sol_4',
                    'title': 'Ph√¢n t√°n r·ªßi ro',
                    'description': f'Chia nh·ªè l√¥ h√†ng qua nhi·ªÅu tuy·∫øn',
                    'benefit_score': 85,
                    'cost': 'Trung b√¨nh',
                    'time': '2-3 ng√†y',
                    'risk': 'Trung b√¨nh',
                    'priority': 'medium'
                }
            ]
        
        elif problem_type == 'DEMAND_SURGE':
            current = problem_data['current_orders']
            predicted = problem_data['predicted_demand']
            
            solutions = [
                {
                    'id': 'sol_1',
                    'title': 'TƒÉng c∆∞·ªùng s·∫£n xu·∫•t',
                    'description': f'TƒÉng s·∫£n xu·∫•t t·ª´ {current} l√™n {predicted} ƒë∆°n v·ªã',
                    'benefit_score': 95,
                    'cost': 'Cao',
                    'time': '1-2 tu·∫ßn',
                    'risk': 'Th·∫•p',
                    'priority': 'best'
                },
                {
                    'id': 'sol_2',
                    'title': 'Thu√™ ngo√†i s·∫£n xu·∫•t',
                    'description': f'K√Ω h·ª£p ƒë·ªìng v·ªõi ƒë·ªëi t√°c s·∫£n xu·∫•t b√™n ngo√†i',
                    'benefit_score': 80,
                    'cost': 'Cao',
                    'time': '2-3 tu·∫ßn',
                    'risk': 'Trung b√¨nh',
                    'priority': 'medium'
                },
                {
                    'id': 'sol_3',
                    'title': 'T·ªëi ∆∞u h√≥a quy tr√¨nh',
                    'description': f'C·∫£i thi·ªán hi·ªáu su·∫•t s·∫£n xu·∫•t hi·ªán t·∫°i',
                    'benefit_score': 70,
                    'cost': 'Trung b√¨nh',
                    'time': '1 tu·∫ßn',
                    'risk': 'Th·∫•p',
                    'priority': 'medium'
                },
                {
                    'id': 'sol_4',
                    'title': 'TƒÉng ca l√†m vi·ªác',
                    'description': f'Y√™u c·∫ßu nh√¢n vi√™n l√†m th√™m gi·ªù',
                    'benefit_score': 60,
                    'cost': 'Trung b√¨nh',
                    'time': '3-5 ng√†y',
                    'risk': 'Cao',
                    'priority': 'urgent'
                }
            ]
        
        # S·∫Øp x·∫øp theo benefit score (cao nh·∫•t l√™n ƒë·∫ßu)
        solutions.sort(key=lambda x: x['benefit_score'], reverse=True)
        return solutions
    
    def create_notification(self, problem_type, problem_data, severity='HIGH'):
        """T·∫°o notification cho v·∫•n ƒë·ªÅ ƒë∆∞·ª£c ph√°t hi·ªán"""
        notification_id = self.generate_notification_id()
        created_time = datetime.now()
        
        # T·∫°o ti√™u ƒë·ªÅ v√† m√¥ t·∫£
        if problem_type == 'INVENTORY_SHORTAGE':
            title = f"üö® Thi·∫øu h·ª•t t·ªìn kho: {problem_data['item']}"
            description = f"T·ªìn kho {problem_data['item']} ch·ªâ c√≤n {problem_data['ratio']:.1%} so v·ªõi y√™u c·∫ßu"
        elif problem_type == 'ROUTE_RISK':
            title = f"‚ö†Ô∏è R·ªßi ro v·∫≠n chuy·ªÉn: {problem_data['route']}"
            description = f"Tuy·∫øn {problem_data['route']} c√≥ r·ªßi ro {problem_data['risk']}%"
        elif problem_type == 'DEMAND_SURGE':
            title = f"üìà TƒÉng ƒë·ªôt bi·∫øn nhu c·∫ßu"
            description = f"D·ª± b√°o nhu c·∫ßu tƒÉng {((problem_data['predicted_demand'] - problem_data['current_orders']) / problem_data['current_orders']) * 100:.1f}%"
        
        # T·∫°o danh s√°ch gi·∫£i ph√°p
        solutions = self.generate_solutions(problem_type, problem_data)
        
        notification = {
            'id': notification_id,
            'type': problem_type,
            'title': title,
            'description': description,
            'severity': severity,
            'created_time': created_time,
            'deadline': created_time + timedelta(seconds=50),  # 50 gi√¢y timeout
            'solutions': solutions,
            'status': 'PENDING',  # PENDING, RESPONDED, AUTO_RESOLVED
            'selected_solution': None,
            'auto_resolved': False
        }
        
        return notification
    
    def detect_problems(self, inventory_data, route_data, current_orders):
        """Ph√°t hi·ªán c√°c v·∫•n ƒë·ªÅ v√† t·∫°o notifications"""
        notifications = []
        
        try:
            # 1. Ph√°t hi·ªán thi·∫øu h·ª•t t·ªìn kho
            inventory_risks = self.analyze_inventory_risk(inventory_data)
            for risk in inventory_risks:
                if risk['risk'] == 'HIGH':
                    notification = self.create_notification('INVENTORY_SHORTAGE', risk, 'HIGH')
                    notifications.append(notification)
            
            # 2. Ph√°t hi·ªán r·ªßi ro tuy·∫øn v·∫≠n chuy·ªÉn
            route_risks = self.analyze_route_risk(route_data)
            for risk in route_risks:
                notification = self.create_notification('ROUTE_RISK', risk, 'MEDIUM')
                notifications.append(notification)
            
            # 3. Ph√°t hi·ªán tƒÉng ƒë·ªôt bi·∫øn nhu c·∫ßu
            predicted_demand = self.predict_demand(current_orders)
            if predicted_demand > current_orders * 1.2:
                demand_data = {
                    'current_orders': current_orders,
                    'predicted_demand': predicted_demand
                }
                notification = self.create_notification('DEMAND_SURGE', demand_data, 'MEDIUM')
                notifications.append(notification)
        
        except Exception as e:
            st.error(f"L·ªói ph√°t hi·ªán v·∫•n ƒë·ªÅ: {str(e)}")
        
        return notifications
    
    def auto_resolve_notification(self, notification):
        """T·ª± ƒë·ªông gi·∫£i quy·∫øt notification sau 50 gi√¢y"""
        try:
            # Check if there are any solutions
            if not notification['solutions'] or len(notification['solutions']) == 0:
                notification['result'] = "‚ùå Kh√¥ng c√≥ gi·∫£i ph√°p kh·∫£ d·ª•ng ƒë·ªÉ t·ª± ƒë·ªông gi·∫£i quy·∫øt."
                notification['auto_resolved'] = True
                notification['status'] = 'AUTO_RESOLVED'
                return notification['result']

            # Ch·ªçn gi·∫£i ph√°p t·ªët nh·∫•t (ƒë·∫ßu ti√™n trong danh s√°ch ƒë√£ s·∫Øp x·∫øp)
            best_solution = notification['solutions'][0]
            notification['selected_solution'] = best_solution
            notification['status'] = 'AUTO_RESOLVED'
            notification['auto_resolved'] = True

            # Th·ª±c thi gi·∫£i ph√°p
            result = self.execute_solution(best_solution, notification['type'], notification)

            return result

        except Exception as e:
            return f"‚ùå L·ªói t·ª± ƒë·ªông gi·∫£i quy·∫øt: {str(e)}"
    
    def execute_solution(self, solution, problem_type, notification):
        """Th·ª±c thi gi·∫£i ph√°p ƒë∆∞·ª£c ch·ªçn"""
        try:
            if problem_type == 'INVENTORY_SHORTAGE':
                item = notification['description'].split(': ')[1].split()[0]
                if solution['id'] == 'sol_1':  # Nh·∫≠p kh·∫©u kh·∫©n c·∫•p
                    # T√¨m item trong inventory_data
                    found = False
                    for inv_item, data in st.session_state.inventory_data.items():
                        if item in inv_item:
                            shortage = data['required'] - data['current']
                            st.session_state.inventory_data[inv_item]['current'] += int(shortage * 1.5)
                            found = True
                            return f"‚úÖ ƒê√£ nh·∫≠p kh·∫©n c·∫•p {int(shortage * 1.5)} {inv_item}"
                    if not found:
                        return f"‚ùå Kh√¥ng t√¨m th·∫•y linh ki·ªán {item} trong kho."

            elif problem_type == 'ROUTE_RISK':
                route = notification['description'].split(': ')[1]
                if solution['id'] == 'sol_1':  # Chuy·ªÉn tuy·∫øn
                    # T√¨m tuy·∫øn thay th·∫ø t·ªët nh·∫•t
                    if not st.session_state.route_data:
                        return "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu tuy·∫øn v·∫≠n chuy·ªÉn."
                    best_route = min(st.session_state.route_data.items(), key=lambda x: x[1]['risk'])
                    if route not in st.session_state.route_data:
                        return f"‚ùå Kh√¥ng t√¨m th·∫•y tuy·∫øn {route} trong d·ªØ li·ªáu."
                    st.session_state.route_data[route]['risk'] = max(30, st.session_state.route_data[route]['risk'] - 40)
                    st.session_state.route_data[best_route[0]]['risk'] = min(60, best_route[1]['risk'] + 20)
                    return f"‚úÖ ƒê√£ chuy·ªÉn t·ª´ {route} sang {best_route[0]}"

            elif problem_type == 'DEMAND_SURGE':
                if solution['id'] == 'sol_1':  # TƒÉng s·∫£n xu·∫•t
                    additional_orders = 50
                    st.session_state.orders_processed += additional_orders
                    return f"‚úÖ ƒê√£ tƒÉng s·∫£n xu·∫•t th√™m {additional_orders} ƒë∆°n h√†ng"

            return f"‚úÖ ƒê√£ th·ª±c thi gi·∫£i ph√°p: {solution['title']}"
        
        except Exception as e:
            return f"‚ùå L·ªói th·ª±c thi gi·∫£i ph√°p: {str(e)}"

# Kh·ªüi t·∫°o AI Engine
ai_engine = AIDecisionEngine()

# Header
st.markdown('<h1 class="main-header">ü§ñ AI Dashboard - Qu·∫£n l√Ω Chu·ªói Cung ·ª®ng ABC</h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; color: #6b7280; font-size: 1.1rem;">S·∫£n xu·∫•t xe ƒë·∫°p ƒëi·ªán th√¥ng minh v·ªõi AI</p>', unsafe_allow_html=True)

# Sidebar ƒëi·ªÅu khi·ªÉn
st.sidebar.header("üéõÔ∏è ƒêi·ªÅu khi·ªÉn m√¥ ph·ªèng")

# N√∫t ƒëi·ªÅu khi·ªÉn
col1, col2, col3 = st.sidebar.columns(3)
with col1:
    if st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu", key="start"):
        st.session_state.simulation_running = True
with col2:
    if st.button("‚è∏Ô∏è D·ª´ng", key="pause"):
        st.session_state.simulation_running = False
with col3:
    if st.button("üîÑ Reset", key="reset"):
        st.session_state.simulation_running = False
        st.session_state.simulation_step = 0
        st.session_state.orders_processed = 0
        st.session_state.ai_decisions = []
        st.session_state.active_notifications = []
        st.session_state.notification_history = []
        # Reset data
        st.session_state.inventory_data = {
            'Pin lithium': {'current': 2500, 'required': 3500, 'trend': -50},
            'Motor ƒëi·ªán': {'current': 1800, 'required': 2200, 'trend': -30},
            'Khung xe': {'current': 3200, 'required': 2800, 'trend': -40},
            'B√°nh xe': {'current': 4500, 'required': 4200, 'trend': -60},
            'Phanh ƒëƒ©a': {'current': 2100, 'required': 2800, 'trend': -35}
        }
        st.session_state.route_data = {
            'Tuy·∫øn A (Trung Qu·ªëc)': {'risk': 85, 'delay': '7-10 ng√†y', 'position': 0, 'speed': 2},
            'Tuy·∫øn B (ƒê√†i Loan)': {'risk': 25, 'delay': '0-2 ng√†y', 'position': 0, 'speed': 3},
            'Tuy·∫øn C (Nh·∫≠t B·∫£n)': {'risk': 45, 'delay': '3-5 ng√†y', 'position': 0, 'speed': 2.5}
        }

# C√†i ƒë·∫∑t AI
st.sidebar.header("ü§ñ C√†i ƒë·∫∑t AI")
ai_auto_mode = st.sidebar.checkbox("üîÑ T·ª± ƒë·ªông ra quy·∫øt ƒë·ªãnh", value=True)
ai_sensitivity = st.sidebar.slider("üéØ ƒê·ªô nh·∫°y AI", 0.1, 1.0, 0.7, 0.1)

# Auto-refresh settings
st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t l√†m m·ªõi")
auto_refresh = st.sidebar.checkbox("üîÑ T·ª± ƒë·ªông l√†m m·ªõi", value=True)
refresh_interval = st.sidebar.slider("‚è±Ô∏è Kho·∫£ng th·ªùi gian (gi√¢y)", 1, 10, 2)

# Debug controls
st.sidebar.header("üêõ Debug Controls")
if st.sidebar.button("üîç Test Notifications"):
    test_notifications = ai_engine.detect_problems(
        st.session_state.inventory_data,
        st.session_state.route_data,
        st.session_state.orders_processed
    )
    for notification in test_notifications:
        st.session_state.active_notifications.append(notification)
    st.success("‚úÖ Test notifications added!")

# Add Ollama model selection in sidebar
st.sidebar.header("üß† AI Model Settings")
ollama_model = st.sidebar.text_input("Ollama Model Name", value="llama2")

# M√¥ ph·ªèng th·ªùi gian th·ª±c
if st.session_state.simulation_running:
    try:
        # C·∫≠p nh·∫≠t d·ªØ li·ªáu
        st.session_state.simulation_step += 1
        
        # C·∫≠p nh·∫≠t t·ªìn kho (gi·∫£m theo th·ªùi gian)
        for item in st.session_state.inventory_data:
            decrease = random.randint(10, 30)
            st.session_state.inventory_data[item]['current'] = max(0, 
                st.session_state.inventory_data[item]['current'] - decrease)
        
        # C·∫≠p nh·∫≠t v·ªã tr√≠ xe
        for route in st.session_state.route_data:
            st.session_state.route_data[route]['position'] += st.session_state.route_data[route]['speed']
            if st.session_state.route_data[route]['position'] >= 100:
                st.session_state.route_data[route]['position'] = 0
        
        # C·∫≠p nh·∫≠t ƒë∆°n h√†ng
        st.session_state.orders_processed += random.randint(1, 5)
        
        # AI ph√°t hi·ªán v·∫•n ƒë·ªÅ v√† t·∫°o notifications
        if st.session_state.simulation_step % 15 == 0:  # M·ªói 15 b∆∞·ªõc
            new_notifications = ai_engine.detect_problems(
                st.session_state.inventory_data,
                st.session_state.route_data,
                st.session_state.orders_processed
            )
            
            for notification in new_notifications:
                # Ki·ªÉm tra xem notification ƒë√£ t·ªìn t·∫°i ch∆∞a
                existing_ids = [n['id'] for n in st.session_state.active_notifications]
                if notification['id'] not in existing_ids:
                    st.session_state.active_notifications.append(notification)
        
        # Ki·ªÉm tra timeout cho notifications
        current_time = datetime.now()
        for notification in st.session_state.active_notifications[:]:  # Copy list ƒë·ªÉ tr√°nh l·ªói khi modify
            if notification['status'] == 'PENDING' and current_time >= notification['deadline']:
                # Auto resolve sau 45 ph√∫t
                result = ai_engine.auto_resolve_notification(notification)
                notification['result'] = result
                st.session_state.notification_history.append(notification)
                st.session_state.active_notifications.remove(notification)
    
    except Exception as e:
        st.error(f"L·ªói trong m√¥ ph·ªèng: {str(e)}")
        st.session_state.simulation_running = False

# Hi·ªÉn th·ªã tr·∫°ng th√°i m√¥ ph·ªèng
if st.session_state.simulation_running:
    st.markdown(f"""
    <div class="alert-box">
        <strong>üîÑ ƒêang m√¥ ph·ªèng...</strong> B∆∞·ªõc {st.session_state.simulation_step} | 
        ƒê∆°n h√†ng ƒë√£ x·ª≠ l√Ω: {st.session_state.orders_processed}
    </div>
    """, unsafe_allow_html=True)

# Debug Panel
with st.expander("üêõ Debug Information"):
    st.write(f"**Simulation Step:** {st.session_state.simulation_step}")
    st.write(f"**Orders Processed:** {st.session_state.orders_processed}")
    st.write(f"**Active Notifications:** {len(st.session_state.active_notifications)}")
    st.write(f"**Notification History:** {len(st.session_state.notification_history)}")
    
    if st.session_state.active_notifications:
        st.write("**Active Notification IDs:**")
        for notification in st.session_state.active_notifications:
            st.write(f"- {notification['id']}: {notification['title']}")
    
    st.write("**Current Inventory:**")
    for item, data in st.session_state.inventory_data.items():
        ratio = data['current'] / data['required'] if data['required'] > 0 else 0
        st.write(f"- {item}: {data['current']}/{data['required']} ({ratio:.1%})")

# AI Notifications Panel
st.subheader("üîî Th√¥ng b√°o AI - C·∫ßn x·ª≠ l√Ω")

# Helper function to interact with Ollama
def ollama_chat(messages, model_name):
    try:
        response = ollama.chat(
            model=model_name,
            messages=messages
        )
        return response['message']['content']
    except Exception as e:
        return f"[L·ªói Ollama]: {str(e)}"

# Hi·ªÉn th·ªã active notifications
if st.session_state.active_notifications:
    for notification in st.session_state.active_notifications:
        if notification['status'] == 'PENDING':
            notif_id = notification['id']
            # Initialize chat history for this notification
            if notif_id not in st.session_state.notification_chats:
                # System prompt with context
                system_prompt = (
                    f"B·∫°n l√† AI chuy√™n gia chu·ªói cung ·ª©ng. D∆∞·ªõi ƒë√¢y l√† m·ªôt v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt: {notification['title']} - {notification['description']}. "
                    f"C√°c gi·∫£i ph√°p kh·∫£ d·ª•ng: " + ", ".join([f'{i+1}. {s['title']}: {s['description']}' for i, s in enumerate(notification['solutions'])]) + ". "
                    "H√£y th·∫£o lu·∫≠n v·ªõi ng∆∞·ªùi d√πng ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ t√¨nh hu·ªëng, sau ƒë√≥ t·ª± ƒë·ªông ch·ªçn gi·∫£i ph√°p t·ªët nh·∫•t v√† th√¥ng b√°o quy·∫øt ƒë·ªãnh c·ªßa b·∫°n. Khi ƒë√£ quy·∫øt ƒë·ªãnh, h√£y b·∫Øt ƒë·∫ßu c√¢u tr·∫£ l·ªùi b·∫±ng [DECISION] v√† ghi r√µ gi·∫£i ph√°p b·∫°n ch·ªçn."
                )
                st.session_state.notification_chats[notif_id] = [
                    {"role": "system", "content": system_prompt}
                ]
            chat_history = st.session_state.notification_chats[notif_id]

            # Display notification info
            time_left = notification['deadline'] - datetime.now()
            seconds_left = max(0, int(time_left.total_seconds()))
            st.markdown(f"""
            <div class="notification-box">
                <h4>{notification['title']}</h4>
                <p>{notification['description']}</p>
                <div class="timer-box">
                    ‚è∞ C√≤n l·∫°i: {seconds_left} gi√¢y
                </div>
            </div>
            """, unsafe_allow_html=True)

            # Display chat history
            st.write("**üí¨ AI Chat:**")
            for msg in chat_history[1:]:  # skip system prompt
                if msg['role'] == 'user':
                    st.markdown(f"<div style='color:blue'><b>B·∫°n:</b> {msg['content']}</div>", unsafe_allow_html=True)
                else:
                    st.markdown(f"<div style='color:green'><b>AI:</b> {msg['content']}</div>", unsafe_allow_html=True)

            # User input
            user_input = st.text_input(f"Nh·∫≠p c√¢u h·ªèi ho·∫∑c √Ω ki·∫øn cho AI (ID: {notif_id})", key=f"chat_input_{notif_id}")
            send_btn = st.button("G·ª≠i", key=f"send_btn_{notif_id}")

            if send_btn and user_input.strip():
                chat_history.append({"role": "user", "content": user_input.strip()})
                with st.spinner("AI ƒëang tr·∫£ l·ªùi..."):
                    ai_response = ollama_chat(chat_history, ollama_model)
                chat_history.append({"role": "assistant", "content": ai_response})
                st.session_state.notification_chats[notif_id] = chat_history
                st.rerun()

            # Check if AI made a decision
            if any(msg['role'] == 'assistant' and msg['content'].strip().startswith('[DECISION]') for msg in chat_history):
                # Find the latest decision message
                decision_msg = next(msg for msg in reversed(chat_history) if msg['role'] == 'assistant' and msg['content'].strip().startswith('[DECISION]'))
                # Try to match the solution from the message
                chosen_solution = None
                for sol in notification['solutions']:
                    if sol['title'] in decision_msg['content']:
                        chosen_solution = sol
                        break
                if not chosen_solution:
                    # fallback: pick the first solution
                    chosen_solution = notification['solutions'][0]
                notification['selected_solution'] = chosen_solution
                notification['status'] = 'RESPONDED'
                result = ai_engine.execute_solution(chosen_solution, notification['type'], notification)
                notification['result'] = result
                st.session_state.notification_history.append(notification)
                st.session_state.active_notifications.remove(notification)
                st.success(f"ü§ñ AI ƒë√£ ch·ªçn gi·∫£i ph√°p: {chosen_solution['title']}")
                st.rerun()

            st.write("---")

# L·ªãch s·ª≠ notifications
if st.session_state.notification_history:
    st.subheader("üìã L·ªãch s·ª≠ th√¥ng b√°o")
    for notification in st.session_state.notification_history[-5:]:  # Hi·ªÉn th·ªã 5 c√°i g·∫ßn nh·∫•t
        status_icon = "ü§ñ" if notification['auto_resolved'] else "üë§"
        status_text = "T·ª± ƒë·ªông gi·∫£i quy·∫øt" if notification['auto_resolved'] else "X·ª≠ l√Ω th·ªß c√¥ng"
        
        st.write(f"**{status_icon} {notification['title']}** - {status_text}")
        st.write(f"Th·ªùi gian: {notification['created_time'].strftime('%H:%M:%S')}")
        if notification['selected_solution']:
            st.write(f"Gi·∫£i ph√°p: {notification['selected_solution']['title']}")
        if 'result' in notification:
            st.write(f"K·∫øt qu·∫£: {notification['result']}")
        st.write("---")

# KPI Cards
st.subheader("üìä Ch·ªâ s·ªë hi·ªáu su·∫•t ch√≠nh")
col1, col2, col3, col4 = st.columns(4)

with col1:
    demand_increase = 40
    st.metric("üìà D·ª± b√°o nhu c·∫ßu", f"+{demand_increase}%", delta=f"+{demand_increase}%")

with col2:
    shortage_items = sum(1 for item, data in st.session_state.inventory_data.items() 
                        if data['current'] < data['required'])
    st.metric("üì¶ Linh ki·ªán thi·∫øu", f"{shortage_items}/5", 
              delta=f"-{5-shortage_items}" if shortage_items > 0 else "0")

with col3:
    high_risk_routes = sum(1 for route, data in st.session_state.route_data.items() 
                          if data['risk'] >= 70)
    st.metric("üöõ Tuy·∫øn r·ªßi ro cao", f"{high_risk_routes}/3", 
              delta=f"-{3-high_risk_routes}" if high_risk_routes > 0 else "0")

with col4:
    on_time_delivery = 87
    st.metric("‚è∞ Giao ƒë√∫ng h·∫πn", f"{on_time_delivery}%", delta=f"+{on_time_delivery-80}%")

# Layout ch√≠nh
col1, col2 = st.columns([2, 1])

with col1:
    # Bi·ªÉu ƒë·ªì d·ª± b√°o nhu c·∫ßu
    st.subheader("üìà D·ª± b√°o nhu c·∫ßu AI (ML Model)")
    
    # T·∫°o d·ªØ li·ªáu m·∫´u
    months = ['T1', 'T2', 'T3', 'T4', 'T5', 'T6']
    actual = [1200, 1350, 1400, None, None, None]
    predicted = [1150, 1280, 1420, 1580, 1650, 1720]
    optimized = [1680, 1792, 1960, 2212, 2310, 2408]
    
    fig_demand = go.Figure()
    fig_demand.add_trace(go.Scatter(x=months, y=actual, name='Th·ª±c t·∫ø', line=dict(color='gray')))
    fig_demand.add_trace(go.Scatter(x=months, y=predicted, name='ML D·ª± b√°o', line=dict(color='blue')))
    fig_demand.add_trace(go.Scatter(x=months, y=optimized, name='AI T·ªëi ∆∞u (+40%)', line=dict(color='green', width=3)))
    
    fig_demand.update_layout(
        title="D·ª± b√°o nhu c·∫ßu xe ƒë·∫°p ƒëi·ªán",
        xaxis_title="Th√°ng",
        yaxis_title="S·ªë l∆∞·ª£ng",
        height=400
    )
    st.plotly_chart(fig_demand, use_container_width=True)

with col2:
    # Tr·∫°ng th√°i t·ªìn kho
    st.subheader("üì¶ T√¨nh tr·∫°ng t·ªìn kho")
    
    for item, data in st.session_state.inventory_data.items():
        # Fix division by zero error
        if data['required'] > 0:
            ratio = data['current'] / data['required']
        else:
            ratio = 0
            
        color = 'red' if ratio < 0.7 else 'orange' if ratio < 0.9 else 'green'
        status = 'Thi·∫øu' if ratio < 0.7 else '√çt' if ratio < 0.9 else 'ƒê·ªß'
        
        st.write(f"**{item}**")
        st.progress(min(ratio, 1.0))
        st.write(f"Hi·ªán t·∫°i: {data['current']:,} | C·∫ßn: {data['required']:,} | Tr·∫°ng th√°i: {status}")
        st.write("---")

# Ph√¢n t√≠ch r·ªßi ro v·∫≠n chuy·ªÉn
st.subheader("üöõ Ph√¢n t√≠ch r·ªßi ro v·∫≠n chuy·ªÉn (Deep Learning)")

for route, data in st.session_state.route_data.items():
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.write(f"**{route}**")
        risk_color = 'red' if data['risk'] >= 70 else 'orange' if data['risk'] >= 40 else 'green'
        st.write(f"R·ªßi ro: {data['risk']:.0f}% | D·ª± ki·∫øn tr·ªÖ: {data['delay']}")
        
        # Thanh ti·∫øn tr√¨nh xe
        progress_bar = st.progress(data['position'] / 100)
        st.write(f"üöõ Ti·∫øn tr√¨nh: {data['position']:.1f}%")
    
    with col2:
        st.metric("R·ªßi ro", f"{data['risk']:.0f}%")
    
    with col3:
        st.metric("V·ªã tr√≠", f"{data['position']:.1f}%")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #6b7280; padding: 1rem;">
    <p>ü§ñ <strong>AI Supply Chain Management System</strong> | Powered by Machine Learning & Deep Learning</p>
    <p>C√¥ng ty ABC - S·∫£n xu·∫•t xe ƒë·∫°p ƒëi·ªán th√¥ng minh</p>
</div>
""", unsafe_allow_html=True)

# Auto-refresh mechanism (only if simulation is running and auto-refresh is enabled)
if st.session_state.simulation_running and auto_refresh:
    time.sleep(refresh_interval)
    st.rerun()